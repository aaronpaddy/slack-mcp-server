version: '3.8'

services:
  slack-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: slack-mcp-server
    environment:
      # Slack Configuration
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # MCP Configuration
      - MCP_SERVER_NAME=slack-mcp-server
      - MCP_SERVER_VERSION=0.1.0
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: slack-mcp-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes

  # Optional: PostgreSQL for persistent storage (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: slack-mcp-postgres
  #   environment:
  #     - POSTGRES_DB=slack_mcp
  #     - POSTGRES_USER=slack_mcp
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped

# volumes:
#   redis_data:
#   postgres_data:
